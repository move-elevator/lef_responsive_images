###################################
### LIB RESPONSIVE IMAGES
###################################
lib.responsiveImages.image {
    
    ############################################
    ### parse width field as integer
    ############################################
    
    parseImageWidth = TEXT
    parseImageWidth {
        field = imagewidth
        stdWrap{
            intval = 1
            stdWrap.replacement.10{
                search = #([0-9]+)#i
                replace = \1
                useRegExp = 1
            }
        }
    }
    parseImageHeight = TEXT
    parseImageHeight{
        field = imageheight
        stdWrap{
            intval = 1
            stdWrap.replacement.10{
                search = #([0-9]+)#i
                replace = \1
                useRegExp = 1
            }
        }
    }
    
    ############################################
    ### compute image width for each breakpoint
    ############################################
    
    # image width
    
    width = COA
    width {
        
        5 = TEXT
        5.value = ((
        
        # load field width into register for processings
        10 = LOAD_REGISTER
        10{
            container.cObject = TEXT  
            screen.cObject = TEXT  
            imageWidthField.cObject < lib.responsiveImages.image.parseImageWidth
            #   imageHeightField.cObject < lib.responsiveImages.image.parseImageHeight
            
            userDefinedWidth{
                cObject = TEXT
                cObject{
                    value = 0
                    override = 1
                    override.if {
                        isFalse.data = register:imageWidthField
                        # value = 0
                        # equals.data = register:imageHeightField
                        negate = 1
                    }
                }
            }
            # allow carousel to load full width images
            withoutGutter.cObject = TEXT
            withoutGutter.cObject.value = 1
        }
        
        20 = CASE
        20{
            key.data = register:userDefinedWidth
            # Standard responsive behaviour
            0 = TEXT
            0 {
                data = register:container
                
                override.cObject = COA
                override.cObject {
                    10 = TEXT
                    10.data = register:screen
                    20 = TEXT
                    20.value = +{$plugin.lef_responsive_images.gutter}
                    20.if.isTrue.data = register:withoutGutter
                }
                override.if.isTrue.data = register:fluid
                
                # available width for image above text
                # factor set by typoscript variable
                # changing this dosent require any change on css 
                
                stdWrap  {
                    
                    wrap {
                        cObject = TEXT
                        cObject {
                            value = (|)/{$plugin.lef_responsive_images.images.divideImageAboveTextWidth}
                            
                            stdWrap.if {
                                value = 17,18,25,26
                                isInList.field = imageorient
                            }
                        }
                    }
                    outerWrap = (|)
                }
                
            }
            
            # User defined width
            1 = COA
            1 {
                
                10 = TEXT
                10.data = register:imageWidthField
                
                # get computed image width from register if height is defined by user
                10.ifEmpty.data = register:imagewidth
                
                # relative size across breakpoints
                # assume width is given for large screen
                20 = COA
                20{
                    stdWrap.if.isTrue = {$plugin.lef_responsive_images.images.userWidthProportional}  
                    
                    10 = TEXT
                    10{
                        data = register:width_lg
                        wrap = /|*
                    }
                    20 = TEXT
                    20.data = register:container
                    
                }   
                stdWrap{
                    override{
                        data = register:container
                        if{
                            isFalse.data = register:fluid
                            value.data = register:imageWidthField
                            isLessThan.data = register:container
                        }
                    }    
                    stdWrap.outerWrap = ((|)+{$plugin.lef_responsive_images.gutter})
                }
                
            }
            
        }
        
        ## multi columns layouts
        30 = COA
        30 {
            
            ## remove gutter width
            10 = TEXT
            10.value = {$plugin.lef_responsive_images.gutter}
            
            15 = TEXT
            15.value = +(
            
            ## gutters between multiple columns only when image count > 1
            20 = TEXT
            20.value = {$styles.content.imgtext.colSpace}
            
            25 = TEXT
            25.value =  *
            
            30 = TEXT
            30{
                value = 0
                override = ({field:imagecols}-1)
                override{
                    insertData = 1
                    if {
                        value = 1
                        isGreaterThan.data = register:imageCount
                    }
                }
            }
            
            35 = TEXT
            35.value = )
            stdWrap.wrap = -(|)
        }
        
        40 = TEXT
        40.value = )
        
        # columns width for multicolumn content
        50 = TEXT
        50 {
            # divide by the number of columns
            value = /{field:imagecols}
            stdWrap.if {
                value = 1
                isGreaterThan.data = register:imageCount
            }
            insertData = 1
        }
        
        60 = TEXT
        60.value = )
        
        # image border thick and space
        70 = TEXT
        70 {
            value = -(({$styles.content.imgtext.borderThick}+{$styles.content.imgtext.borderSpace})*2)
            stdWrap.if.isTrue.field = imageborder
        }
        
        80 = RESTORE_REGISTER
        
        stdWrap.prioriCalc = intval
    }
    
    
    ##################################
    ## SrcSet media query helper    ##
    ##################################
    
    # SrcSet helper
    mediaQuery = COA
    mediaQuery {
        
        # media query min width
        10 = TEXT
        10.stdWrap.wrap = (min-width:|px)
        10.required = 1
        
        20 = TEXT
        20{
            value = AND
            stdWrap.noTrimWrap = | | |
            if.isTrue = 1
        }
        
        # media query max width
        30 = COA
        30{
            10 = TEXT
            10.prioriCalc = intval
            stdWrap{
                wrap = (max-width:|px)
                required = 1
            }   
        }
        
        # media query pixeldensity
        40 = TEXT
        40.required = 1
        40.stdWrap.noTrimWrap = | AND (|)|
        
    }
    
    # SrcSet helper
    screenWidth = COA
    screenWidth {
        # screen width
        10 = TEXT
        10{
            value =
            stdWrap.insertData = 1
            prioriCalc = intval
        }
        stdWrap{
            noTrimWrap = | |vw|
        }  
    }    
}
